import tkinter as tk 
from tkinter import ttk, messagebox 
import random 
import string 
import re 
import hashlib 
import time 
from datetime import datetime 
class PasswordSecurityTool: 
    def __init__(self): 
        self.root = tk.Tk() 
        self.setup_main_window() 
        self.create_notebook() 
        self.password_history = []       
    def setup_main_window(self): 
        self.root.title("     Password Security Suite     ") 
        self.root.geometry("800x600") 
        self.root.configure(bg='#1a1a2e') 
        self.root.resizable(True, True)  
        # Title 
        title_frame = tk.Frame(self.root, bg='#1a1a2e') 
        title_frame.pack(pady=15) 
        title_label = tk.Label(title_frame, 
                              text="     Password Security Suite", 
                              font=("Arial", 22, "bold"), 
                              fg='#00ff87', 
                              bg='#1a1a2e') 
        title_label.pack() 
                              
 
         
        subtitle = tk.Label(title_frame, 
                           text="Generate • Analyze • Secure", 
                           font=("Arial", 12), 
                           fg='#16213e', 
                           bg='#1a1a2e') 
        subtitle.pack() 
    def create_notebook(self): 
        # Create notebook for tabs 
        self.notebook = ttk.Notebook(self.root) 
        self.notebook.pack(expand=True, fill='both', padx=20, pady=10) 
        # Configure ttk styles 
        style = ttk.Style() 
        style.theme_use('clam') 
        style.configure('TNotebook', background='#1a1a2e') 
        style.configure('TNotebook.Tab', background='#16213e', foreground='white') 
        # Create tabs 
        self.create_generator_tab() 
        self.create_analyzer_tab() 
        self.create_breach_checker_tab() 
    def create_generator_tab(self): 
        # Password Generator Tab 
        gen_frame = tk.Frame(self.notebook, bg='#0f3460') 
        self.notebook.add(gen_frame, text="       Password Generator")   
        # Options frame 
        options_frame = tk.LabelFrame(gen_frame,  
                                     text="Generation Options", 
                                     font=("Arial", 12, "bold"), 
                                     fg='white', 
                                     bg='#0f3460', 
                              
 
                                     padx=20, pady=15) 
        options_frame.pack(fill='x', padx=20, pady=10) 
         
        # Length slider 
        tk.Label(options_frame, text="Password Length:",  
                font=("Arial", 10, "bold"), fg='white', bg='#0f3460').pack(anchor='w') 
         
        self.length_var = tk.IntVar(value=12) 
        self.length_scale = tk.Scale(options_frame,  
                                    from_=4, to=50, 
                                    orient=tk.HORIZONTAL, 
                                    variable=self.length_var, 
                                    bg='#0f3460', fg='white', 
                                    highlightthickness=0) 
        self.length_scale.pack(fill='x', pady=5) 
         
        # Checkboxes for character types 
        checkbox_frame = tk.Frame(options_frame, bg='#0f3460') 
        checkbox_frame.pack(fill='x', pady=10) 
         
        self.include_uppercase = tk.BooleanVar(value=True) 
        self.include_lowercase = tk.BooleanVar(value=True) 
        self.include_numbers = tk.BooleanVar(value=True) 
        self.include_symbols = tk.BooleanVar(value=True) 
        self.exclude_ambiguous = tk.BooleanVar(value=False) 
         
        checkboxes = [ 
            ("Uppercase (A-Z)", self.include_uppercase), 
            ("Lowercase (a-z)", self.include_lowercase), 
            ("Numbers (0-9)", self.include_numbers), 
            ("Symbols (!@#$...)", self.include_symbols), 
                              
 
            ("Exclude Ambiguous (0,O,l,1)", self.exclude_ambiguous) 
        ] 
         
        for i, (text, var) in enumerate(checkboxes): 
            row = i // 2 
            col = i % 2 
            cb = tk.Checkbutton(checkbox_frame, text=text, variable=var, 
                               fg='white', bg='#0f3460', 
                               selectcolor='#1a1a2e', 
                               font=("Arial", 9)) 
            cb.grid(row=row, column=col, sticky='w', padx=10, pady=2) 
         
        # Generate button 
        generate_btn = tk.Button(options_frame, 
                                text="  Generate Password", 
                                command=self.generate_password, 
                                font=("Arial", 12, "bold"), 
                                bg='#00ff87', 
                                fg='#1a1a2e', 
                                padx=20, pady=8) 
        generate_btn.pack(pady=15) 
         
        # Results frame 
        results_frame = tk.LabelFrame(gen_frame, 
                                     text="Generated Password", 
                                     font=("Arial", 12, "bold"), 
                                     fg='white', 
                                     bg='#0f3460', 
                                     padx=20, pady=15) 
        results_frame.pack(fill='both', expand=True, padx=20, pady=10) 
                              
 
         
        self.password_display = tk.Text(results_frame, 
                                       height=3, 
                                       font=("Courier", 14, "bold"), 
                                       bg='#1a1a2e', 
                                       fg='#00ff87', 
                                       wrap=tk.WORD) 
        self.password_display.pack(fill='x', pady=5) 
         
        # Action buttons 
        action_frame = tk.Frame(results_frame, bg='#0f3460') 
        action_frame.pack(fill='x', pady=10) 
         
        copy_btn = tk.Button(action_frame, 
                            text="         Copy to Clipboard", 
                            command=self.copy_password, 
                            bg='#16213e', fg='white') 
        copy_btn.pack(side='left', padx=5) 
         
        save_btn = tk.Button(action_frame, 
                            text="       Save Password", 
                            command=self.save_password, 
                            bg='#16213e', fg='white') 
        save_btn.pack(side='left', padx=5) 
         
        self.strength_label = tk.Label(results_frame, 
                                      text="", 
                                      font=("Arial", 11, "bold"), 
                                      bg='#0f3460') 
        self.strength_label.pack(pady=5) 
                              
 
     
    def create_analyzer_tab(self): 
        # Password Analyzer Tab 
        analyzer_frame = tk.Frame(self.notebook, bg='#16213e') 
        self.notebook.add(analyzer_frame, text="    Password Analyzer") 
         
        # Input frame 
        input_frame = tk.LabelFrame(analyzer_frame, 
                                   text="Enter Password to Analyze", 
                                   font=("Arial", 12, "bold"), 
                                   fg='white', 
                                   bg='#16213e', 
                                   padx=20, pady=15) 
        input_frame.pack(fill='x', padx=20, pady=10) 
         
        self.analyze_entry = tk.Entry(input_frame, 
                                     font=("Courier", 12), 
                                     show="*", 
                                     bg='#1a1a2e', 
                                     fg='#00ff87', 
                                     width=50) 
        self.analyze_entry.pack(pady=10) 
         
        button_frame = tk.Frame(input_frame, bg='#16213e') 
        button_frame.pack() 
         
        analyze_btn = tk.Button(button_frame, 
                               text="    Analyze Password", 
                               command=self.analyze_password, 
                               font=("Arial", 11, "bold"), 
                              
 
                               bg='#00ff87', 
                               fg='#1a1a2e', 
                               padx=20) 
        analyze_btn.pack(side='left', padx=5) 
         
        self.show_password_var = tk.BooleanVar() 
        show_cb = tk.Checkbutton(button_frame, 
                                text="Show Password", 
                                variable=self.show_password_var, 
                                command=self.toggle_password_visibility, 
                                fg='white', 
                                bg='#16213e', 
                                selectcolor='#1a1a2e') 
        show_cb.pack(side='left', padx=10) 
         
        # Results frame 
        self.analysis_frame = tk.LabelFrame(analyzer_frame, 
                                           text="Analysis Results", 
                                           font=("Arial", 12, "bold"), 
                                           fg='white', 
                                           bg='#16213e', 
                                           padx=20, pady=15) 
        self.analysis_frame.pack(fill='both', expand=True, padx=20, pady=10) 
         
        self.analysis_text = tk.Text(self.analysis_frame, 
                                    font=("Arial", 10), 
                                    bg='#1a1a2e', 
                                    fg='white', 
                                    wrap=tk.WORD, 
                                    state='disabled') 
        self.analysis_text.pack(fill='both', expand=True) 
                              
 
     
    def create_breach_checker_tab(self): 
        # Breach Checker Tab 
        breach_frame = tk.Frame(self.notebook, bg='#1a1a2e') 
        self.notebook.add(breach_frame, text="    Breach Checker") 
         
        info_frame = tk.LabelFrame(breach_frame, 
                                  text="Password Breach Simulation", 
                                  font=("Arial", 12, "bold"), 
                                  fg='white', 
                                  bg='#1a1a2e', 
                                  padx=20, pady=15) 
        info_frame.pack(fill='x', padx=20, pady=10) 
         
        info_text = """This tool simulates checking if your password appears in common breach databases. 
(Note: This is a simulation - no actual breach databases are accessed)""" 
         
        tk.Label(info_frame, text=info_text, 
                font=("Arial", 10), 
                fg='#ffff99', 
                bg='#1a1a2e', 
                justify='left').pack() 
         
        self.breach_entry = tk.Entry(info_frame, 
                                    font=("Courier", 12), 
                                    show="*", 
                                    bg='#0f3460', 
                                    fg='white', 
                                    width=40) 
        self.breach_entry.pack(pady=15) 
                              
 
         
        check_btn = tk.Button(info_frame, 
                             text="    Check for Breaches", 
                             command=self.check_breach, 
                             font=("Arial", 11, "bold"), 
                             bg='#ff6b6b', 
                             fg='white', 
                             padx=20) 
        check_btn.pack() 
         
        self.breach_result = tk.Label(breach_frame, 
                                     text="", 
                                     font=("Arial", 12, "bold"), 
                                     bg='#1a1a2e', 
                                     wraplength=600) 
        self.breach_result.pack(pady=20) 
     
    def generate_password(self): 
        length = self.length_var.get() 
         
        # Build character set 
        charset = "" 
        if self.include_uppercase.get(): 
            charset += string.ascii_uppercase 
        if self.include_lowercase.get(): 
            charset += string.ascii_lowercase 
        if self.include_numbers.get(): 
            charset += string.digits 
        if self.include_symbols.get(): 
            charset += "!@#$%^&*()_+-=[]{}|;:,.<>?" 
                              
 
         
        if self.exclude_ambiguous.get(): 
            ambiguous = "0O1lI" 
            charset = ''.join(c for c in charset if c not in ambiguous) 
         
        if not charset: 
            messagebox.showwarning("Warning", "Please select at least one character type!") 
            return 
         
        # Generate password 
        password = ''.join(random.choice(charset) for _ in range(length)) 
         
        # Display password 
        self.password_display.delete(1.0, tk.END) 
        self.password_display.insert(1.0, password) 
         
        # Show strength 
        strength = self.calculate_strength(password) 
        self.display_strength(strength) 
         
        # Add to history 
        self.password_history.append({ 
            'password': password, 
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
            'strength': strength 
        }) 
     
    def calculate_strength(self, password): 
        score = 0 
        feedback = [] 
         
                              
 
        # Length check 
        if len(password) >= 12: 
            score += 25 
        elif len(password) >= 8: 
            score += 15 
        else: 
            feedback.append("Too short") 
         
        # Character variety 
        if re.search(r'[A-Z]', password): 
            score += 20 
        if re.search(r'[a-z]', password): 
            score += 20 
        if re.search(r'\d', password): 
            score += 15 
        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password): 
            score += 20 
         
        # Determine strength level 
        if score >= 80: 
            return {"level": "Very Strong", "score": score, "color": "#00ff87"} 
        elif score >= 60: 
            return {"level": "Strong", "score": score, "color": "#ffff00"} 
        elif score >= 40: 
            return {"level": "Medium", "score": score, "color": "#ffa500"} 
        else: 
            return {"level": "Weak", "score": score, "color": "#ff6b6b"} 
     
    def display_strength(self, strength): 
        text = f"Strength: {strength['level']} ({strength['score']}/100)" 
        self.strength_label.config(text=text, fg=strength['color']) 
                              
 
     
    def copy_password(self): 
        password = self.password_display.get(1.0, tk.END).strip() 
        if password: 
            self.root.clipboard_clear() 
            self.root.clipboard_append(password) 
            messagebox.showinfo("Success", "Password copied to clipboard!") 
     
    def save_password(self): 
        password = self.password_display.get(1.0, tk.END).strip() 
        if password: 
            try: 
                with open("generated_passwords.txt", "a") as f: 
                    f.write(f"{datetime.now()}: {password}\n") 
                messagebox.showinfo("Success", "Password saved to file!") 
            except Exception as e: 
                messagebox.showerror("Error", f"Failed to save: {str(e)}") 
     
    def analyze_password(self): 
        password = self.analyze_entry.get() 
        if not password: 
            messagebox.showwarning("Warning", "Please enter a password to analyze!") 
            return 
         
        # Perform analysis 
        analysis = self.perform_detailed_analysis(password) 
         
        # Display results 
        self.analysis_text.config(state='normal') 
        self.analysis_text.delete(1.0, tk.END) 
        self.analysis_text.insert(tk.END, analysis) 
                              
 
        self.analysis_text.config(state='disabled') 
     
    def perform_detailed_analysis(self, password): 
        analysis = "PASSWORD ANALYSIS REPORT\n" 
        analysis += "=" * 50 + "\n\n" 
         
        # Basic stats 
        analysis += f"Length: {len(password)} characters\n" 
        analysis += f"Uppercase letters: {sum(1 for c in password if c.isupper())}\n" 
        analysis += f"Lowercase letters: {sum(1 for c in password if c.islower())}\n" 
        analysis += f"Numbers: {sum(1 for c in password if c.isdigit())}\n" 
        analysis += f"Special characters: {sum(1 for c in password if not c.isalnum())}\n\n" 
         
        # Strength assessment 
        strength = self.calculate_strength(password) 
        analysis += f"Overall Strength: {strength['level']} ({strength['score']}/100)\n\n" 
         
        # Crack time estimation 
        charset_size = 0 
        if any(c.isupper() for c in password): 
            charset_size += 26 
        if any(c.islower() for c in password): 
            charset_size += 26 
        if any(c.isdigit() for c in password): 
            charset_size += 10 
        if any(not c.isalnum() for c in password): 
            charset_size += 32 
         
        combinations = charset_size ** len(password) 
        # Assuming 1 billion guesses per second 
        crack_time_seconds = combinations / (2 * 1000000000) 
                              
 
         
        if crack_time_seconds < 60: 
            time_str = f"{crack_time_seconds:.2f} seconds" 
        elif crack_time_seconds < 3600: 
            time_str = f"{crack_time_seconds/60:.2f} minutes" 
        elif crack_time_seconds < 86400: 
            time_str = f"{crack_time_seconds/3600:.2f} hours" 
        elif crack_time_seconds < 31536000: 
            time_str = f"{crack_time_seconds/86400:.2f} days" 
        else: 
            time_str = f"{crack_time_seconds/31536000:.2e} years" 
         
        analysis += f"Estimated crack time: {time_str}\n\n" 
         
        # Recommendations 
        analysis += "RECOMMENDATIONS:\n" 
        analysis += "-" * 20 + "\n" 
         
        if len(password) < 12: 
            analysis += "• Increase length to at least 12 characters\n" 
        if not any(c.isupper() for c in password): 
            analysis += "• Add uppercase letters\n" 
        if not any(c.islower() for c in password): 
            analysis += "• Add lowercase letters\n" 
        if not any(c.isdigit() for c in password): 
            analysis += "• Add numbers\n" 
        if not any(not c.isalnum() for c in password): 
            analysis += "• Add special characters\n" 
         
        # Check for common patterns 
        if password.lower() in ['password', '123456', 'qwerty']: 
                              
 
            analysis += "• CRITICAL: This is a commonly used password!\n" 
         
        return analysis 
     
    def toggle_password_visibility(self): 
        if self.show_password_var.get(): 
            self.analyze_entry.config(show="") 
        else: 
            self.analyze_entry.config(show="*") 
     
    def check_breach(self): 
        password = self.breach_entry.get() 
        if not password: 
            messagebox.showwarning("Warning", "Please enter a password to check!") 
            return 
         
        # Simulate breach check (random result for demo) 
        import random 
        time.sleep(1)  # Simulate API call delay 
         
        common_passwords = ['password', '123456', 'password123', 'admin', 'qwerty'] 
         
        if password.lower() in common_passwords or random.random() < 0.1: 
            result = "    WARNING: This password was found in breach databases!" 
            color = "#ff6b6b" 
        else: 
            result = "   Good news! This password was not found in known breaches." 
            color = "#00ff87" 
         
        self.breach_result.config(text=result, fg=color) 
                              
 
     
    def run(self): 
        self.root.mainloop() 
 
# Run the application 
if __name__ == "__main__": 
    app = PasswordSecurityTool() 
    app.run() 
